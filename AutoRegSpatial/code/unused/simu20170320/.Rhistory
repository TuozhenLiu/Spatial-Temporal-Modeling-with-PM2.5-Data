for (i in 1:length(Ns))
{
### set the parameters
N = Ns[i]
p = ceiling(N^(1/2))
beta = rep(1, p)
est_rho = rep(0, Nrep)
est_beta = rep(0, Nrep)
est_sigma2 = rep(0, Nrep)
grad_bias = rep(0, Nrep)
for (r in 1:Nrep)
{
cat(r, "\r")
### generate the data
I = Diagonal(N,x = 1)
X = matrix(rnorm(N*p), nrow = N)
W = getPowerLawW(N, alpha = 0.25, normalize = T)
Y = solve(I - rho*W)%*%(X%*%beta +rnorm(N))
Px = Xt%*%solve(t(Xt)%*%Xt)%*%t(Xt)
Wf = I-rho*W
Ws = solve(a = Wf, b = W)
grad_bias[r] = tr(Px%*%Ws)/N
### obtain estimates
#res_sar = sarX(Y, X, W)
res_sarp = sarX.profile(Y, X, W)
est_rho[r] = res_sarp$rho
est_sigma2[r] = res_sarp$sigma2
est_beta[r] = mean((res_sarp$beta-1)^2)
}
cat("N = ", N, "\n",
"Estimatio for Rho and Sigma2: \n",
"Bias: ",mean(est_rho - rho), mean(est_sigma2 - 1), "\n",
"SD: ", sd(est_rho), sd(est_sigma2), "\n",
"RMSE for beta: \n",
sqrt(mean(est_beta)), "\n",
"First-order Bias: ", mean(grad_bias), "\n")
}
Ns = c(100, 200, 400)
rho = 0.3
Nrep = 200
set.seed(1234)
for (i in 1:length(Ns))
{
### set the parameters
N = Ns[i]
p = ceiling(N^(1/2))
beta = rep(1, p)
est_rho = rep(0, Nrep)
est_beta = rep(0, Nrep)
est_sigma2 = rep(0, Nrep)
grad_bias = rep(0, Nrep)
for (r in 1:Nrep)
{
cat(r, "\r")
### generate the data
I = Diagonal(N,x = 1)
X = matrix(rnorm(N*p), nrow = N)
W = getPowerLawW(N, alpha = 0.25, normalize = T)
Y = solve(I - rho*W)%*%(X%*%beta +rnorm(N))
Px = X%*%solve(t(X)%*%X)%*%t(X)
Wf = I-rho*W
Ws = solve(a = Wf, b = W)
grad_bias[r] = tr(Px%*%Ws)/N
### obtain estimates
#res_sar = sarX(Y, X, W)
res_sarp = sarX.profile(Y, X, W)
est_rho[r] = res_sarp$rho
est_sigma2[r] = res_sarp$sigma2
est_beta[r] = mean((res_sarp$beta-1)^2)
}
cat("N = ", N, "\n",
"Estimatio for Rho and Sigma2: \n",
"Bias: ",mean(est_rho - rho), mean(est_sigma2 - 1), "\n",
"SD: ", sd(est_rho), sd(est_sigma2), "\n",
"RMSE for beta: \n",
sqrt(mean(est_beta)), "\n",
"First-order Bias: ", mean(grad_bias), "\n")
}
getPowerLawW<-function(N, alpha, normalize = T)                                                        ### get power-law network W
{
Nfollowers = rpldis(N, 1, alpha)                                                                     ### generate N random numbers following power-law(1, alpha): k1-kN
A = sapply(Nfollowers, function(n) {                                                                 ### for node i, randomly select ki nodes to follow it
vec = rep(0, N)
vec[sample(1:N, min(n,N))] = 1
return(vec)
})
diag(A) = 0
ind = which(rowSums(A)==0)                                                                           ### in case some row sums are zero
for (i in ind)
{
A[i, sample(setdiff(1:N,i), 3)] = 1                                                                ### for those node, randomly select 3 followees
}
if (!normalize)
return(A)
W = A/rowSums(A)
W = as(W, "dgCMatrix")
return(W)
}
sarX.profile<-function(Y, Xt, W)
{
n = nrow(Xt); d = ncol(Xt)
I = Diagonal(n,x = 1)
WY = W%*%Y
Px = Xt%*%solve(t(Xt)%*%Xt)%*%t(Xt)
IPx = I-Px
PxWY = IPx%*%WY
rhohatm = as.numeric(sum(WY*Y)/crossprod(WY))
dist1 = 0.1; I = Diagonal(n = n, x = 1)
while(abs(dist1)>10^(-6))
{
#show(dist1)
Wf = I-rhohatm*W
Ws = solve(a = Wf, b = W)
WfY = Wf%*%Y
nsig2_hat = (t(WfY)%*%IPx%*%WfY)
wp = sum(WfY*PxWY)
a1rhohat = -tr(Ws)+n*wp/nsig2_hat
Ws2 = sum(Ws*t(Ws))
a2rhohat = -Ws2 - n*t(WY)%*%IPx%*%WY/nsig2_hat+n*wp^2/nsig2_hat^2
dist1 = as.numeric(a1rhohat/a2rhohat)
rhohatm = rhohatm - dist1
}
beta = ginv(as.matrix(crossprod(Xt)))%*%t(Xt)%*%(Wf%*%Y)
delta = Wf%*%Y - Xt%*%beta
sigma2 = as.numeric(crossprod(delta)/n)
wxb = Ws%*%Xt%*%beta
a2r = as.numeric(Ws2 + sum(Ws^2) + crossprod(wxb)/sigma2)
a2s = n/(2*sigma2^2)
a2b = crossprod(Xt)/sigma2
a2rs = tr(Ws)/sigma2^2
a2rb = as.numeric(t(wxb)%*%Xt/sigma2)
a2bs = rep(0,d)
varmat = matrix(0, nrow = 2+d, ncol = 2+d)
varmat[1,1] = a2r; varmat[2,2] = a2s; varmat[3:(2+d),3:(2+d)] = as.matrix(a2b)
varmat[1,2] = a2rs; varmat[2,1] = a2rs
varmat[3:(2+d),1] = a2rb; varmat[1, 3:(2+d)] = a2rb
varmat[3:(2+d),2] = a2bs; varmat[2, 3:(2+d)] = a2bs
#sd = sqrt(diag(solve(varmat)))
sd = sqrt(diag(ginv(varmat)))
#Yhat = as.numeric(rhohatm*WY+Xt%*%beta)
Yhat = as.numeric(solve(I-rhohatm*W)%*%(Xt%*%beta))
return(list(rho = rhohatm, beta = beta, sigma2 = sigma2, sd = sd, Yhat = Yhat))
}
tr<-function(x)
{
return(sum(diag(x)))
}
sarX<-function(Y, Xt, W)
{
n = nrow(Xt); d = ncol(Xt)
WY = W%*%Y
rhohatm = as.numeric(sum(WY*Y)/crossprod(WY))
dist1 = 0.1; I = Diagonal(n = n, x = 1)
while(abs(dist1)>10^(-6))
{
#show(dist1)
rhohatm = rhohatm - dist1
Wf = I-rhohatm*W
Ws = solve(a = Wf, b = W)
#beta = solve((crossprod(Xt)))%*%t(Xt)%*%(Wf%*%Y)
beta = ginv(as.matrix(crossprod(Xt)))%*%t(Xt)%*%(Wf%*%Y)
delta = Wf%*%Y - Xt%*%beta
sigma2 = as.numeric(crossprod(delta)/n)
a1rhohat = tr(Ws) - t(WY)%*%delta/sigma2
Ws2 = sum(Ws*t(Ws))
a2rhohat = sum(Ws*t(Ws)) + crossprod(WY)/sigma2
dist1 = as.numeric(a1rhohat/a2rhohat)
}
wxb = Ws%*%Xt%*%beta
a2r = as.numeric(Ws2 + sum(Ws^2) + crossprod(wxb)/sigma2)
a2s = n/(2*sigma2^2)
a2b = crossprod(Xt)/sigma2
a2rs = tr(Ws)/sigma2^2
a2rb = as.numeric(t(wxb)%*%Xt/sigma2)
a2bs = rep(0,d)
varmat = matrix(0, nrow = 2+d, ncol = 2+d)
varmat[1,1] = a2r; varmat[2,2] = a2s; varmat[3:(2+d),3:(2+d)] = as.matrix(a2b)
varmat[1,2] = a2rs; varmat[2,1] = a2rs
varmat[3:(2+d),1] = a2rb; varmat[1, 3:(2+d)] = a2rb
varmat[3:(2+d),2] = a2bs; varmat[2, 3:(2+d)] = a2bs
#sd = sqrt(diag(solve(varmat)))
sd = sqrt(diag(ginv(varmat)))
#Yhat = as.numeric(rhohatm*WY+Xt%*%beta)
Yhat = as.numeric(solve(I-rhohatm*W)%*%(Xt%*%beta))
return(list(rho = rhohatm, beta = beta, sigma2 = sigma2, sd = sd, Yhat = Yhat))
}
adjust.Rsquare<-function(Y, Yhat, s)
{
r2 = 1 - sum((Y - Yhat)^2)/sum((Y-mean(Y))^2)
#return(r2)
n = length(Y)
adj_r2 = 1 - (1-r2)*(n-1)/(n-s-2)
return(adj_r2)
}
lm.sparse<-function(Y, X)
{
beta = ginv(as.matrix(crossprod(X)))%*%t(X)%*%(Y)
Yhat = as.numeric(X%*%beta)
return(Yhat)
}
projX<-function(X)
{
return(X%*%ginv(as.matrix(crossprod(X)))%*%t(X))
}
sig.est<-function(X, Y)
{
s = ncol(X); n = nrow(X)
PM = projX(X)
up = t(Y)%*%(Diagonal(n, x = 1)-PM)%*%Y
down = n - s
sig = as.numeric(up/down)
return(sig)
}
SARX.CV<-function(slogYchar, Xt, W1)
{
N = length(slogYchar)
Yhat = rep(0, N)
#Xt = matrix(Xt, nrow = N)
for (i in 1:N)
{
cat(i, "\r")
res = sarX(Y = slogYchar[-i], cbind(Xt[-i,]), W1[-i,-i])
Yhat[i] = as.numeric(res$rho*sum(W1[i,-i]*slogYchar[-i])+sum(Xt[i,]*res$beta))
}
return(Yhat)
}
sig.sar<-function(Y, W, X, s, rho)
{
### Sigma Esimation by Cross-validation（拆成两部分）
Ystar = Y- rho*W%*%Y
n2 = floor(length(Y)/2)
set.seed(1234)
ind = sample(1:length(Y), n2)
X1 = as.matrix(X[ind,]); X1 = X1[, colSums(X1)!=0]
X2 = as.matrix(X[-ind,]); X2 = X2[, colSums(X2)!=0]
P1 = cor(X1, Ystar[ind]); P1[is.na(P1)] = 0
P2 = cor(X2, Ystar[-ind]); P2[is.na(P2)] = 0
sig1 = sig.est(X1[, order(P1, decreasing = T)[1:s]], Ystar[ind])
sig2 = sig.est(X2[, order(P2, decreasing = T)[1:s]], Ystar[-ind])
(sig_sar = (sig1+sig2)/2) # 最终得到sigma估计
return(sig_sar)
}
Ns = c(100, 200, 400)
rho = 0.3
Nrep = 200
i=1
N = Ns[i]
p = ceiling(N^(1/2))
beta = rep(1, p)
est_rho = rep(0, Nrep)
est_beta = rep(0, Nrep)
est_sigma2 = rep(0, Nrep)
grad_bias = rep(0, Nrep)
r = 1
### generate the data
I = Diagonal(N,x = 1)
X = matrix(rnorm(N*p), nrow = N)
W = getPowerLawW(N, alpha = 0.25, normalize = T)
Y = solve(I - rho*W)%*%(X%*%beta +rnorm(N))
Px = X%*%solve(t(X)%*%X)%*%t(X)
Wf = I-rho*W
Ws = solve(a = Wf, b = W)
grad_bias[r] = tr(Px%*%Ws)/N
getPowerLawW<-function(N, alpha, normalize = T)                                                        ### get power-law network W
{
Nfollowers = rpldis(N, 1, alpha)                                                                     ### generate N random numbers following power-law(1, alpha): k1-kN
A = sapply(Nfollowers, function(n) {                                                                 ### for node i, randomly select ki nodes to follow it
vec = rep(0, N)
vec[sample(1:N, min(n,N))] = 1
return(vec)
})
diag(A) = 0
ind = which(rowSums(A)==0)                                                                           ### in case some row sums are zero
for (i in ind)
{
A[i, sample(setdiff(1:N,i), 3)] = 1                                                                ### for those node, randomly select 3 followees
}
if (!normalize)
return(A)
W = A/rowSums(A)
W = as(W, "dgCMatrix")
return(W)
}
sarX.profile<-function(Y, Xt, W)
{
n = nrow(Xt); d = ncol(Xt)
I = Diagonal(n,x = 1)
WY = W%*%Y
Px = Xt%*%solve(t(Xt)%*%Xt)%*%t(Xt)
IPx = I-Px
PxWY = IPx%*%WY
rhohatm = as.numeric(sum(WY*Y)/crossprod(WY))
dist1 = 0.1; I = Diagonal(n = n, x = 1)
while(abs(dist1)>10^(-6))
{
#show(dist1)
Wf = I-rhohatm*W
Ws = solve(a = Wf, b = W)
WfY = Wf%*%Y
nsig2_hat = (t(WfY)%*%IPx%*%WfY)
wp = sum(WfY*PxWY)
a1rhohat = -tr(Ws)+n*wp/nsig2_hat
Ws2 = sum(Ws*t(Ws))
a2rhohat = -Ws2 - n*t(WY)%*%IPx%*%WY/nsig2_hat+n*wp^2/nsig2_hat^2
dist1 = as.numeric(a1rhohat/a2rhohat)
rhohatm = rhohatm - dist1
}
beta = ginv(as.matrix(crossprod(Xt)))%*%t(Xt)%*%(Wf%*%Y)
delta = Wf%*%Y - Xt%*%beta
sigma2 = as.numeric(crossprod(delta)/n)
wxb = Ws%*%Xt%*%beta
a2r = as.numeric(Ws2 + sum(Ws^2) + crossprod(wxb)/sigma2)
a2s = n/(2*sigma2^2)
a2b = crossprod(Xt)/sigma2
a2rs = tr(Ws)/sigma2^2
a2rb = as.numeric(t(wxb)%*%Xt/sigma2)
a2bs = rep(0,d)
varmat = matrix(0, nrow = 2+d, ncol = 2+d)
varmat[1,1] = a2r; varmat[2,2] = a2s; varmat[3:(2+d),3:(2+d)] = as.matrix(a2b)
varmat[1,2] = a2rs; varmat[2,1] = a2rs
varmat[3:(2+d),1] = a2rb; varmat[1, 3:(2+d)] = a2rb
varmat[3:(2+d),2] = a2bs; varmat[2, 3:(2+d)] = a2bs
#sd = sqrt(diag(solve(varmat)))
sd = sqrt(diag(ginv(varmat)))
#Yhat = as.numeric(rhohatm*WY+Xt%*%beta)
Yhat = as.numeric(solve(I-rhohatm*W)%*%(Xt%*%beta))
return(list(rho = rhohatm, beta = beta, sigma2 = sigma2, sd = sd, Yhat = Yhat))
}
library(Matrix)
### generate the data
I = Diagonal(N,x = 1)
X = matrix(rnorm(N*p), nrow = N)
W = getPowerLawW(N, alpha = 0.25, normalize = T)
Y = solve(I - rho*W)%*%(X%*%beta +rnorm(N))
Px = X%*%solve(t(X)%*%X)%*%t(X)
Wf = I-rho*W
Ws = solve(a = Wf, b = W)
grad_bias[r] = tr(Px%*%Ws)/N
library(poweRlaw)
### generate the data
I = Diagonal(N,x = 1)
X = matrix(rnorm(N*p), nrow = N)
W = getPowerLawW(N, alpha = 0.25, normalize = T)
Y = solve(I - rho*W)%*%(X%*%beta +rnorm(N))
Px = X%*%solve(t(X)%*%X)%*%t(X)
Wf = I-rho*W
Ws = solve(a = Wf, b = W)
grad_bias[r] = tr(Px%*%Ws)/N
Xt = X
n = nrow(Xt); d = ncol(Xt)
I = Diagonal(n,x = 1)
WY = W%*%Y
Px = Xt%*%solve(t(Xt)%*%Xt)%*%t(Xt)
IPx = I-Px
PxWY = IPx%*%WY
rhohatm = 0.3
dist1 = 0.1; I = Diagonal(n = n, x = 1)
Wf = I-rhohatm*W
Ws = solve(a = Wf, b = W)
WfY = Wf%*%Y
nsig2_hat = (t(WfY)%*%IPx%*%WfY)
wp = sum(WfY*PxWY)
a1rhohat = -tr(Ws)+n*wp/nsig2_hat
Ws2 = sum(Ws*t(Ws))
-Ws2 - n*t(WY)%*%IPx%*%WY/nsig2_hat+n*wp^2/nsig2_hat^2
-Ws2 - n*t(WY)%*%IPx%*%WY/nsig2_hat+2*n*wp^2/nsig2_hat^2
N = Ns[i]
W = getPowerLawW(N, alpha = 0.25, normalize = T)
mean(tr(t(W)%*%W))
Ns = seq(50,400, 50)
Ns = seq(50,400, 50)
for (N in Ns)
{
W = getPowerLawW(N, alpha = 0.25, normalize = T)
cat("N = ", N, mean(tr(t(W)%*%W)), "\n")
}
eig_W = eigen(W)
mean(abs(eig_W$values))
Ns = seq(50,400, 50)
for (N in Ns)
{
W = getPowerLawW(N, alpha = 0.25, normalize = T)
eig_W = eigen(W)
cat("N = ", N, mean(tr(t(W)%*%W)), mean(abs(eig_W$values)),"\n")
}
Ns = seq(50,400, 50)
for (N in Ns)
{
W = getPowerLawW(N, alpha = 0.25, normalize = T)
eig_W = eigen(W)
cat("N = ", N, (tr(t(W)%*%W))/N, mean(abs(eig_W$values)),"\n")
}
450/17
7+18+28+18+10
7+18+28+18+8+10
10+9+28+18+10+10
10+19+28+18+10+10
7+10+25+16+7+0
9+19+27+18+8+9
9+18+25+17+8+9
9+19+28+19+8+10
7+9+10+2
8+20+27+17+10+7
9+20+28+19+9+8
8+20+27+20+9+8
5+15+10+10+5+4
9+18+27+20+9+9
9+18+27+20+8+9
install.packages("rgeos")
install.packages("leafletCN")
library(jiebaR)
install.packages("jiebaR")
50000/12
7500*3
7500*2
7500 - 2928
1700*12
9+19+28+18+9+8
9+20+28+19+9+8
10+19+27+18+9+8
9+20+29+19+9+10
10+19+28+19+9+10
9+18+25+18+8+7
9+15+20+18+8+7
1500+1890
load("E:/sales.rda")
sales[1,]
sales[1:10,]
length(unique(sales[,1]))
load("E:/newdata.rda")
newdata[1,]
newdata[1:10,]
length(unique(newdata$tcityname))
length(unique(newdata$tname))
min((newdata$tdate))
max((newdata$tdate))
length(unique(newdata$tdate))
365*5
eigen(matrix(1,5,5))
aa = matrix(0, 10, 10)
aa[,1] = 1
aa[1,] = 1/2
aa[,1] = 1/2
aa
aa[1,] = 1
aa[,1] = 1
aa[1,1] = 0
eigen(aa)
aa = matrix(0, 10, 10)
aa[1,] = 1
aa[,1] = 1
aa[1,1] = 0
eigen(aa)$values[1]
aa = matrix(0, 20, 20)
aa[1,] = 1
aa[,1] = 1
aa[1,1] = 0
eigen(aa)$values[1]
(eigen(aa)$values[1])^2
aa = matrix(0, 30, 30)
aa[1,] = 1
aa[,1] = 1
aa[1,1] = 0
(eigen(aa)$values[1])^2
eigen(matrix(1/5,5,5))
eigen(matrix(1/10,10,10))
setwd("E:/OneDrive/1. Academic/spatial_autoreg/code/simu20170320/")
### source the functions
source("realFunc_city2.R") # real data functions
source("predictFunc2.R") # prediction functions (similar to kriging functions)
source("est_infer_func.R")
### format specify
specify_decimal = function(x, k) gsub('\\s+','',format(round(x, k), nsmall=k))                                   ### format function for keeping 2 digits after
#Nrep = 200
cov.type1 = "exp"
cov.type2 = "quad"
### for the exponential
betaE = 1; sig2E = 1
betaX = 1.5; sig2X = 1; alpha = 0.8
betaMu = 1.5; sig2Mu = 1; mu = 1
Nrep = 1000
cat("\n  For the mixed function, Weak spatial correlation, Estimation repeat: ", Nrep, "\n ")
source("simu_est_mixed.R")
betaE = 1; sig2E = 1
betaX = 1.5; sig2X = 1; alpha = 0.8
betaMu = 1.5; sig2Mu = 1; mu = 1
Nrep = 200
cat("\n  For the mixed function, Weak spatial correlation, Estimation repeat: ", Nrep, "\n ")
source("simu_est_mixed.R")
betaE = 1; sig2E = 1
betaX = 1.5; sig2X = 1; alpha = 0.8
betaMu = 1.5; sig2Mu = 1; mu = 1
Nrep = 1000
cat("\n  For the mixed function, Weak spatial correlation, Estimation repeat: ", Nrep, "\n ")
source("simu_est_mixed.R")
betaE = 1; sig2E = 1
betaX = 1.5; sig2X = 1; alpha = 0.8
betaMu = 1.5; sig2Mu = 1; mu = 1
Nrep = 1000
cat("\n  For the mixed function, Weak spatial correlation, Estimation repeat: ", Nrep, "\n ")
source("simu_est_mixed.R")
#Nrep = 200
cov.type1 = "exp"
cov.type2 = "quad"
### for the exponential
### strong spatial correlation
betaE = 2; sig2E = 1
betaX = 1; sig2X = 1; alpha = 0.8
betaMu = 1; sig2Mu = 1; mu = 1
Nrep = 1000
cat("\n  For the mixedratic function, Strong spatial correlation, Estimation repeat: ", Nrep, "\n ")
source("simu_est_mixed.R")
